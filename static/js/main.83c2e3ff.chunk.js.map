{"version":3,"sources":["components/Header.js","components/Actions.js","components/Cat.js","App.js","serviceWorker.js","index.js"],"names":["Header","Actions","props","className","onClick","feed","type","data-toggle","data-target","walk","class","id","tabindex","role","aria-labelledby","aria-hidden","Cat","src","pic","alt","App","window","$","state","catimg","bind","fitcat","event","this","setState","setTimeout","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wPAaeA,MAXf,WAEI,OACI,gCACI,6CC2BGC,MA/Bf,SAAiBC,GAEb,OACI,6BACI,4BAAQC,UAAU,MAAMC,QAASF,EAAMG,MAAvC,QACA,4BACIC,KAAK,SACLH,UAAU,OACVI,cAAY,QACZC,cAAY,aAJhB,OAKA,4BAAQL,UAAU,MAAMC,QAASF,EAAMO,MAAvC,QAEA,yBAAKC,MAAM,aAAaC,GAAG,WAAWC,SAAS,KAAKC,KAAK,SAASC,kBAAgB,oBAAoBC,cAAY,QAC9G,yBAAKL,MAAM,eAAeG,KAAK,YAC3B,yBAAKH,MAAM,iBAEP,yBAAKA,MAAM,cACP,0CACA,yCCPbM,MAXf,SAAad,GAET,OACI,yBAAKC,UAAU,UACX,yBAAKc,IAAKf,EAAMgB,IAAKC,IAAI,UCkDtBC,G,MAnDLC,OAAOC,E,YAOf,aAAe,IAAD,8BAEZ,+CAEKC,MAAQ,CACXC,OAAQ,gBAGV,EAAKnB,KAAO,EAAKA,KAAKoB,KAAV,gBACZ,EAAKhB,KAAO,EAAKA,KAAKgB,KAAV,gBACZ,EAAKC,OAAS,EAAKA,OAAOD,KAAZ,gBAVF,E,kEAgBTE,GACHC,KAAKC,SAAS,CAAEL,OAAQ,mB,2BAGrBG,GACHC,KAAKC,SAAS,CAAEL,OAAQ,kBACxBM,WAAWF,KAAKF,OAAQ,O,6BAGnBC,GACLC,KAAKC,SAAS,CAAEL,OAAQ,mB,+BAMxB,OACE,yBAAKrB,UAAU,OACb,6BAEA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAKe,IAAKU,KAAKL,MAAMC,SACrB,kBAAC,EAAD,CAASnB,KAAMuB,KAAKvB,KAAMI,KAAMmB,KAAKnB,Y,GAxC3BsB,cCEEC,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.83c2e3ff.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction Header() {\r\n\r\n    return (\r\n        <header >\r\n            <h1>PROJECT CAT</h1>\r\n        </header>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Header ","import React from \"react\"\r\n\r\nfunction Actions(props) {\r\n\r\n    return (\r\n        <div>\r\n            <button className=\"btn\" onClick={props.feed}>Feed</button>\r\n            <button\r\n                type=\"button\"\r\n                className=\"btn \"\r\n                data-toggle=\"modal\"\r\n                data-target=\"#petModal\">Pet</button>\r\n            <button className=\"btn\" onClick={props.walk}>Walk</button>\r\n\r\n            <div class=\"modal fade\" id=\"petModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n                <div class=\"modal-dialog\" role=\"document\">\r\n                    <div class=\"modal-content\">\r\n\r\n                        <div class=\"modal-body\">\r\n                            <p>\"meow meow\"</p>\r\n                            <p>-Cat</p>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Actions ","import React from \"react\"\r\n\r\nfunction Cat(props) {\r\n\r\n    return (\r\n        <div className=\"theCat\">\r\n            <img src={props.pic} alt=\"cat\"></img>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Cat","import React, { Component } from \"react\"\nimport Header from \"./components/Header\"\nimport Actions from \"./components/Actions\"\nimport Cat from \"./components/Cat\"\nimport './App.css';\nconst $ = window.$;\n// const firebase = require(\"firebase\")\n// require(\"firebase/firestore\")\n\n\nclass App extends Component {\n\n  constructor() {\n\n    super()\n\n    this.state = {\n      catimg: \"./catpic.jpg\"\n    }\n\n    this.feed = this.feed.bind(this)\n    this.walk = this.walk.bind(this)\n    this.fitcat = this.fitcat.bind(this)\n\n  }\n\n  //FUNCTIONS-----------------------------------------------------------------------------------------------------------\n\n  feed(event) {\n    this.setState({ catimg: \"./fatcat.jpg\" })\n  }\n\n  walk(event) {\n    this.setState({ catimg: \"./walkcat.jpg\" })\n    setTimeout(this.fitcat, 3000)\n  }\n\n  fitcat(event) {\n    this.setState({ catimg: \"./catpic.jpg\" })\n\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\" >\n        <br></br>\n\n        <Header />\n        <Cat pic={this.state.catimg} />\n        <Actions feed={this.feed} walk={this.walk} />\n      </div >\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}